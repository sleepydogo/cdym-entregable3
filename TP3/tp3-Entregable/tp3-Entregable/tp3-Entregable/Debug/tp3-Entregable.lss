
tp3-Entregable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  00000354  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000111  008001dc  008001dc  000004c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d65  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000972  00000000  00000000  00001381  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e7  00000000  00000000  00001cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  000022dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058d  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000411  00000000  00000000  00002a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002ea6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3d       	cpi	r26, 0xDC	; 220
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac ed       	ldi	r26, 0xDC	; 220
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 3e       	cpi	r26, 0xED	; 237
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#include "main.h"

void main(void){
	// Set baud rate to 9600
	UART_Init(BR9600);
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <UART_Init>
	SEOS_Init_Timer();
  ac:	0e 94 72 00 	call	0xe4	; 0xe4 <SEOS_Init_Timer>
	MENU_Show_Menu();
  b0:	0e 94 5d 00 	call	0xba	; 0xba <MENU_Show_Menu>
	while (1){
		SEOS_Dispatch_Tasks();
  b4:	0e 94 8f 00 	call	0x11e	; 0x11e <SEOS_Dispatch_Tasks>
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0xe>

000000ba <MENU_Show_Menu>:
#include "menu.h"

void MENU_Show_Menu(void)
{
	// El menú se escribe en el buffer de transmisión
 	UART_Write_String_To_Buffer("Menu:\n\r");
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 c9 00 	call	0x192	; 0x192 <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* PLAY: reproduce la cancion seleccionada\n\r");
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 c9 00 	call	0x192	; 0x192 <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* STOP: detiene la reproduccion del sonido en curso\n\r");
  ca:	85 e3       	ldi	r24, 0x35	; 53
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0e 94 c9 00 	call	0x192	; 0x192 <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* NUM: numero de cancion a seleccionar de la lista [1 a N]\n\r");
  d2:	8c e6       	ldi	r24, 0x6C	; 108
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 c9 00 	call	0x192	; 0x192 <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* RESET: reinicia el sistema al estado inicial\n\r");
  da:	8a ea       	ldi	r24, 0xAA	; 170
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 c9 00 	call	0x192	; 0x192 <UART_Write_String_To_Buffer>
  e2:	08 95       	ret

000000e4 <SEOS_Init_Timer>:

void SEOS_Init_Timer() {
	// ------------------------ Timer 0 ------------------------
	
	// Configuro una interrupción cada 1 mseg
	OCR0A = 248;			//124 para 8MHz y 248 para 16MHz
  e4:	88 ef       	ldi	r24, 0xF8	; 248
  e6:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 64
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);   // Modo CTC, clock interno, prescalador 64
  ec:	93 e0       	ldi	r25, 0x03	; 3
  ee:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupción de comparación
  f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	
	// ------------------------ Timer 1 ------------------------
	
	TCCR1A|=(1<<COM1A0);// Configuro Timer1 para clk con prescaler P=1, modo CTC y salida por pin
  f4:	e0 e8       	ldi	r30, 0x80	; 128
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
  fe:	e1 e8       	ldi	r30, 0x81	; 129
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	89 60       	ori	r24, 0x09	; 9
 106:	80 83       	st	Z, r24
	DDRB|=(1<<PINB1); // El PIN1 del PORTB será el pin de salida
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	84 b9       	out	0x04, r24	; 4


	//Habilito la máscara de interrupciones
	
	sei();
 10e:	78 94       	sei
 110:	08 95       	ret

00000112 <SEOS_Schedule_Tasks>:

uint8_t contador_UART = 0;
uint8_t error_uart = 0;

void SEOS_Schedule_Tasks() {
	UART_flag=1; //actualizar periferico
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <UART_flag>
	MENU_flag=1; //actualizar menu
 118:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <MENU_flag>
 11c:	08 95       	ret

0000011e <SEOS_Dispatch_Tasks>:
}

void SEOS_Dispatch_Tasks() {
	if (UART_flag) {
 11e:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <UART_flag>
 122:	88 23       	and	r24, r24
 124:	31 f0       	breq	.+12     	; 0x132 <SEOS_Dispatch_Tasks+0x14>
		UART_flag=0;
 126:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <UART_flag>
		UART_Update(&error_uart);
 12a:	8c ed       	ldi	r24, 0xDC	; 220
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_Update>
 132:	08 95       	ret

00000134 <__vector_14>:
// 	}
}

// Control de la duraci�n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci�n de comparaci�n del Timer 0
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	SEOS_Schedule_Tasks();
 156:	0e 94 89 00 	call	0x112	; 0x112 <SEOS_Schedule_Tasks>
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <UART_Write_Char_To_Buffer>:
    if (UCSR0A & (1 << RXC0)){
        *dato = UDR0;
        return 1;
    } else
		return 0;
}
 17c:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <TXindice_escritura>
 180:	e9 2f       	mov	r30, r25
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	ed 51       	subi	r30, 0x1D	; 29
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	80 83       	st	Z, r24
 18a:	9f 5f       	subi	r25, 0xFF	; 255
 18c:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <TXindice_escritura>
 190:	08 95       	ret

00000192 <UART_Write_String_To_Buffer>:
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	00 d0       	rcall	.+0      	; 0x19e <UART_Write_String_To_Buffer+0xc>
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	7c 01       	movw	r14, r24
 1a4:	1a 82       	std	Y+2, r1	; 0x02
 1a6:	19 82       	std	Y+1, r1	; 0x01
 1a8:	10 e0       	ldi	r17, 0x00	; 0
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <UART_Write_String_To_Buffer+0x26>
 1ac:	be 01       	movw	r22, r28
 1ae:	6f 5f       	subi	r22, 0xFF	; 255
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255
 1b2:	0e 94 be 00 	call	0x17c	; 0x17c <UART_Write_Char_To_Buffer>
 1b6:	1f 5f       	subi	r17, 0xFF	; 255
 1b8:	f7 01       	movw	r30, r14
 1ba:	e1 0f       	add	r30, r17
 1bc:	f1 1d       	adc	r31, r1
 1be:	80 81       	ld	r24, Z
 1c0:	81 11       	cpse	r24, r1
 1c2:	f4 cf       	rjmp	.-24     	; 0x1ac <UART_Write_String_To_Buffer+0x1a>
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	08 95       	ret

000001d4 <UART_Init>:
 1d4:	e1 ec       	ldi	r30, 0xC1	; 193
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	10 82       	st	Z, r1
 1da:	96 e0       	ldi	r25, 0x06	; 6
 1dc:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1e8:	80 81       	ld	r24, Z
 1ea:	88 60       	ori	r24, 0x08	; 8
 1ec:	80 83       	st	Z, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	80 61       	ori	r24, 0x10	; 16
 1f2:	80 83       	st	Z, r24
 1f4:	08 95       	ret

000001f6 <UART_Send_Char>:
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	ba 01       	movw	r22, r20
 1fc:	4f 5f       	subi	r20, 0xFF	; 255
 1fe:	5f 4f       	sbci	r21, 0xFF	; 255
 200:	6f 4f       	sbci	r22, 0xFF	; 255
 202:	7f 4f       	sbci	r23, 0xFF	; 255
 204:	21 f0       	breq	.+8      	; 0x20e <UART_Send_Char+0x18>
 206:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 20a:	95 ff       	sbrs	r25, 5
 20c:	f7 cf       	rjmp	.-18     	; 0x1fc <UART_Send_Char+0x6>
 20e:	45 2b       	or	r20, r21
 210:	46 2b       	or	r20, r22
 212:	47 2b       	or	r20, r23
 214:	11 f0       	breq	.+4      	; 0x21a <UART_Send_Char+0x24>
 216:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 21a:	08 95       	ret

0000021c <UART_Update>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	2a 97       	sbiw	r28, 0x0a	; 10
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
 230:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <FLAG_datos_recibidos>
 234:	88 23       	and	r24, r24
 236:	89 f0       	breq	.+34     	; 0x25a <UART_Update+0x3e>
 238:	40 91 df 01 	lds	r20, 0x01DF	; 0x8001df <RXindice_escritura>
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	63 ee       	ldi	r22, 0xE3	; 227
 240:	72 e0       	ldi	r23, 0x02	; 2
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	0e 94 9f 01 	call	0x33e	; 0x33e <memcpy>
 24a:	83 ee       	ldi	r24, 0xE3	; 227
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	0e 94 c9 00 	call	0x192	; 0x192 <UART_Write_String_To_Buffer>
 252:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <FLAG_datos_recibidos>
 256:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <RXindice_escritura>
 25a:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <TXindice_lectura>
 25e:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <TXindice_escritura>
 262:	e8 17       	cp	r30, r24
 264:	60 f4       	brcc	.+24     	; 0x27e <UART_Update+0x62>
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ed 51       	subi	r30, 0x1D	; 29
 26a:	fe 4f       	sbci	r31, 0xFE	; 254
 26c:	80 81       	ld	r24, Z
 26e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <UART_Send_Char>
 272:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <TXindice_lectura>
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <TXindice_lectura>
 27c:	04 c0       	rjmp	.+8      	; 0x286 <UART_Update+0x6a>
 27e:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <TXindice_lectura>
 282:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <TXindice_escritura>
 286:	2a 96       	adiw	r28, 0x0a	; 10
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	de bf       	out	0x3e, r29	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	cd bf       	out	0x3d, r28	; 61
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <__vector_20>:

// Foreground - Consumidor, esperamos a que la tarea de background genere los datos y los transmisitmos
ISR(USART_TX_vect) {
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	2f 93       	push	r18
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
	UDR0 = TX_buffer[TXindice_lectura];
 2ac:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <TXindice_lectura>
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	ed 51       	subi	r30, 0x1D	; 29
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	80 81       	ld	r24, Z
 2b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	TXindice_lectura++;
 2bc:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <TXindice_lectura>
 2c0:	ef 5f       	subi	r30, 0xFF	; 255
 2c2:	e0 93 e1 01 	sts	0x01E1, r30	; 0x8001e1 <TXindice_lectura>
	if ((TXindice_lectura == TX_BUFFER_LENGTH) || (TX_buffer[TXindice_lectura] == "\n\r")) {
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ed 51       	subi	r30, 0x1D	; 29
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	80 81       	ld	r24, Z
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	85 50       	subi	r24, 0x05	; 5
 2d2:	91 40       	sbci	r25, 0x01	; 1
 2d4:	39 f4       	brne	.+14     	; 0x2e4 <__vector_20+0x4c>
		TXindice_lectura = 0;
 2d6:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <TXindice_lectura>
		// TODO: Limpiar el buffer TX...
		UCSR0B &= ~(1<<TXCIE0); // deshabilita la interrupción de transmisión completa en el registro de control de la USART, asegurándose de que el microcontrolador no sea interrumpido cuando se completa la transmisión de datos a través de la USART.
 2da:	e1 ec       	ldi	r30, 0xC1	; 193
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	8f 7b       	andi	r24, 0xBF	; 191
 2e2:	80 83       	st	Z, r24
	}
}
 2e4:	ff 91       	pop	r31
 2e6:	ef 91       	pop	r30
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <__vector_18>:

// Foreground - Productor
ISR(USART_RX_vect) {
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
	char aux = UDR0;
 30a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (aux == '\r\n') {	
		RX_buffer[RXindice_escritura] = "\0";
		FLAG_datos_recibidos = 1;
	} 
	else if (RXindice_escritura == RX_BUFFER_LENGTH) {
 30e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <RXindice_escritura>
 312:	8a 30       	cpi	r24, 0x0A	; 10
 314:	19 f4       	brne	.+6      	; 0x31c <__vector_18+0x24>
		RXindice_escritura = 0;
 316:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <RXindice_escritura>
 31a:	08 c0       	rjmp	.+16     	; 0x32c <__vector_18+0x34>
		// TODO: añadir error
	} 
	else {
		RX_buffer[RXindice_escritura] = aux;
 31c:	e8 2f       	mov	r30, r24
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	ed 51       	subi	r30, 0x1D	; 29
 322:	fd 4f       	sbci	r31, 0xFD	; 253
 324:	90 83       	st	Z, r25
		RXindice_escritura++;	
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <RXindice_escritura>
	}
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <memcpy>:
 33e:	fb 01       	movw	r30, r22
 340:	dc 01       	movw	r26, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <memcpy+0xa>
 344:	01 90       	ld	r0, Z+
 346:	0d 92       	st	X+, r0
 348:	41 50       	subi	r20, 0x01	; 1
 34a:	50 40       	sbci	r21, 0x00	; 0
 34c:	d8 f7       	brcc	.-10     	; 0x344 <memcpy+0x6>
 34e:	08 95       	ret

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
