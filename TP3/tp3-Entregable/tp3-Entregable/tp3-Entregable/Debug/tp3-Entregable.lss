
tp3-Entregable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  000002a2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000207  008001dc  008001dc  00000412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf5  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095d  00000000  00000000  00001261  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fe  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000543  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032c  00000000  00000000  000028cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002bf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3d       	cpi	r26, 0xDC	; 220
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	ac ed       	ldi	r26, 0xDC	; 220
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3e       	cpi	r26, 0xE3	; 227
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "main.h"

void main(void){
	int aux = 0;
	// Set baud rate to 9600
	UART_Init(BR9600);
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	0e 94 ef 00 	call	0x1de	; 0x1de <UART_Init>
	TIMER_Init();
  ac:	0e 94 ac 00 	call	0x158	; 0x158 <TIMER_Init>
	//UART_Write_String_To_Buffer("                     _      \n                    (_)     \n _ __ ___  _   _ ___ _  ___ \n| '_ ` _ \\| | | / __| |/ __|\n| | | | | | |_| \\__ \\ | (__ \n|_| |_| |_|\\__,_|___/_|\\___|\n\r");
	//UART_Write_String_To_Buffer("---------created by sleepydogo, merianro--------\n\r");
	MENU_Show_Menu();
  b0:	0e 94 5d 00 	call	0xba	; 0xba <MENU_Show_Menu>
	while (1){
		SEOS_Dispatch_Tasks();
  b4:	0e 94 78 00 	call	0xf0	; 0xf0 <SEOS_Dispatch_Tasks>
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0xe>

000000ba <MENU_Show_Menu>:
#include "menu.h"

void MENU_Show_Menu(void)
{
	// El menÃº se escribe en el buffer de transmisiÃ³n
 	UART_Write_String_To_Buffer("Menu:\n\r");
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 ce 00 	call	0x19c	; 0x19c <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* PLAY: reproduce la cancion seleccionada\n\r");
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 ce 00 	call	0x19c	; 0x19c <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* STOP: detiene la reproduccion del sonido en curso\n\r");
  ca:	85 e3       	ldi	r24, 0x35	; 53
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0e 94 ce 00 	call	0x19c	; 0x19c <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* NUM: numero de cancion a seleccionar de la lista [1 a N]\n\r");
  d2:	8c e6       	ldi	r24, 0x6C	; 108
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 ce 00 	call	0x19c	; 0x19c <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* RESET: reinicia el sistema al estado inicial\n\r");
  da:	8a ea       	ldi	r24, 0xAA	; 170
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 ce 00 	call	0x19c	; 0x19c <UART_Write_String_To_Buffer>
  e2:	08 95       	ret

000000e4 <SEOS_Schedule_Tasks>:

uint8_t contador_UART = 0;
uint8_t error_uart = 0;

void SEOS_Schedule_Tasks() {
	UART_flag=1; //actualizar periferico
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <UART_flag>
	MENU_flag=1; //actualizar menu
  ea:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <MENU_flag>
  ee:	08 95       	ret

000000f0 <SEOS_Dispatch_Tasks>:
}

void SEOS_Dispatch_Tasks() {
	if (UART_flag) {
  f0:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <UART_flag>
  f4:	88 23       	and	r24, r24
  f6:	31 f0       	breq	.+12     	; 0x104 <SEOS_Dispatch_Tasks+0x14>
		UART_flag=0;
  f8:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <UART_flag>
		UART_Update(&error_uart);
  fc:	8c ed       	ldi	r24, 0xDC	; 220
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 1f 01 	call	0x23e	; 0x23e <UART_Update>
 104:	08 95       	ret

00000106 <__vector_14>:
// 	}
}

// Control de la duraciï¿½n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupciï¿½n de comparaciï¿½n del Timer 0
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	4f 93       	push	r20
 116:	5f 93       	push	r21
 118:	6f 93       	push	r22
 11a:	7f 93       	push	r23
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	af 93       	push	r26
 122:	bf 93       	push	r27
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
	SEOS_Schedule_Tasks();
 128:	0e 94 72 00 	call	0xe4	; 0xe4 <SEOS_Schedule_Tasks>
	if (++contador_UART == 5){
 12c:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <contador_UART>
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <contador_UART>
		
	}

}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <TIMER_Init>:

void TIMER_Init(){
	// ------------------------ Timer 0 ------------------------
	
	// Configuro una interrupción cada 1 mseg
	OCR0A = 248;			//124 para 8MHz y 248 para 16MHz
 158:	88 ef       	ldi	r24, 0xF8	; 248
 15a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 64
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);   // Modo CTC, clock interno, prescalador 64
 160:	93 e0       	ldi	r25, 0x03	; 3
 162:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupción de comparación
 164:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	// ------------------------ Timer 1 ------------------------
	
	TCCR1A|=(1<<COM1A0);// Configuro Timer1 para clk con prescaler P=1, modo CTC y salida por pin
 168:	e0 e8       	ldi	r30, 0x80	; 128
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 64       	ori	r24, 0x40	; 64
 170:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
 172:	e1 e8       	ldi	r30, 0x81	; 129
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	89 60       	ori	r24, 0x09	; 9
 17a:	80 83       	st	Z, r24
	DDRB|=(1<<PINB1); // El PIN1 del PORTB será el pin de salida
 17c:	84 b1       	in	r24, 0x04	; 4
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	84 b9       	out	0x04, r24	; 4


	//Habilito la máscara de interrupciones
	
	sei();
 182:	78 94       	sei
 184:	08 95       	ret

00000186 <UART_Write_Char_To_Buffer>:
    {
        RXindice_lectura = 0;
        RXindice_escritura = 0;
        return 0; // No Hay
    }
}
 186:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <TXindice_escritura>
 18a:	e9 2f       	mov	r30, r25
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ed 51       	subi	r30, 0x1D	; 29
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	80 83       	st	Z, r24
 194:	9f 5f       	subi	r25, 0xFF	; 255
 196:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <TXindice_escritura>
 19a:	08 95       	ret

0000019c <UART_Write_String_To_Buffer>:
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <UART_Write_String_To_Buffer+0xc>
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	7c 01       	movw	r14, r24
 1ae:	1a 82       	std	Y+2, r1	; 0x02
 1b0:	19 82       	std	Y+1, r1	; 0x01
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <UART_Write_String_To_Buffer+0x26>
 1b6:	be 01       	movw	r22, r28
 1b8:	6f 5f       	subi	r22, 0xFF	; 255
 1ba:	7f 4f       	sbci	r23, 0xFF	; 255
 1bc:	0e 94 c3 00 	call	0x186	; 0x186 <UART_Write_Char_To_Buffer>
 1c0:	1f 5f       	subi	r17, 0xFF	; 255
 1c2:	f7 01       	movw	r30, r14
 1c4:	e1 0f       	add	r30, r17
 1c6:	f1 1d       	adc	r31, r1
 1c8:	80 81       	ld	r24, Z
 1ca:	81 11       	cpse	r24, r1
 1cc:	f4 cf       	rjmp	.-24     	; 0x1b6 <UART_Write_String_To_Buffer+0x1a>
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	08 95       	ret

000001de <UART_Init>:
}
// Estas son las funciones que encapsulan el Hardware
void UART_Init(uint8_t baud){
		// config = 0x33 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 8MHz.
		// config = 0x25 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 4Hz.
		UCSR0B = 0;
 1de:	e1 ec       	ldi	r30, 0xC1	; 193
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	10 82       	st	Z, r1
		UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 1e4:	96 e0       	ldi	r25, 0x06	; 6
 1e6:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		UBRR0H = (unsigned char)(baud>>8);
 1ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		UBRR0L = (unsigned char)baud;
 1ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
		
		//TX Enable
		UCSR0B |= (1<<TXEN0);
 1f2:	80 81       	ld	r24, Z
 1f4:	88 60       	ori	r24, 0x08	; 8
 1f6:	80 83       	st	Z, r24
		//RX Enable
		UCSR0B |= (1<<RXEN0);
 1f8:	80 81       	ld	r24, Z
 1fa:	80 61       	ori	r24, 0x10	; 16
 1fc:	80 83       	st	Z, r24
 1fe:	08 95       	ret

00000200 <UART_Send_Char>:
		
}

void UART_Send_Char (char dato)
{
	long Timeout = 0;
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	ba 01       	movw	r22, r20
	while ( ( ++Timeout ) && ((UCSR0A & (1<<UDRE0))==0));
 206:	4f 5f       	subi	r20, 0xFF	; 255
 208:	5f 4f       	sbci	r21, 0xFF	; 255
 20a:	6f 4f       	sbci	r22, 0xFF	; 255
 20c:	7f 4f       	sbci	r23, 0xFF	; 255
 20e:	21 f0       	breq	.+8      	; 0x218 <UART_Send_Char+0x18>
 210:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 214:	95 ff       	sbrs	r25, 5
 216:	f7 cf       	rjmp	.-18     	; 0x206 <UART_Send_Char+0x6>
	if (Timeout != 0)
 218:	45 2b       	or	r20, r21
 21a:	46 2b       	or	r20, r22
 21c:	47 2b       	or	r20, r23
 21e:	11 f0       	breq	.+4      	; 0x224 <UART_Send_Char+0x24>
		UDR0 = dato;
 220:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 224:	08 95       	ret

00000226 <UART_Receive_data>:
		
	}
	return;
}

char UART_Receive_data(char *dato){
 226:	fc 01       	movw	r30, r24
    if (UCSR0A & (1 << RXC0)){
 228:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 22c:	99 23       	and	r25, r25
 22e:	2c f4       	brge	.+10     	; 0x23a <UART_Receive_data+0x14>
        *dato = UDR0;
 230:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 234:	80 83       	st	Z, r24
        return 1;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	08 95       	ret
    }else
		return 0;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	08 95       	ret

0000023e <UART_Update>:
        RXindice_escritura = 0;
        return 0; // No Hay
    }
}

void UART_Update(int * Error_code){
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	1f 92       	push	r1
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
    char dato;
    if (TXindice_lectura < TXindice_escritura) { // Hay byte en el buffer Tx para transmitir?
 248:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <TXindice_lectura>
 24c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <TXindice_escritura>
 250:	e8 17       	cp	r30, r24
 252:	60 f4       	brcc	.+24     	; 0x26c <UART_Update+0x2e>
        UART_Send_Char(TX_buffer[TXindice_lectura]);
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	ed 51       	subi	r30, 0x1D	; 29
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	80 81       	ld	r24, Z
 25c:	0e 94 00 01 	call	0x200	; 0x200 <UART_Send_Char>
        TXindice_lectura++;
 260:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <TXindice_lectura>
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <TXindice_lectura>
 26a:	04 c0       	rjmp	.+8      	; 0x274 <UART_Update+0x36>
    }else{ // No hay datos disponibles para enviar
        TXindice_lectura = 0;
 26c:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <TXindice_lectura>
        TXindice_escritura = 0;
 270:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <TXindice_escritura>
    }
    // se ha recibido algÃºn byte?
    if (UART_Receive_data(&dato) != 0)
 274:	ce 01       	movw	r24, r28
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	0e 94 13 01 	call	0x226	; 0x226 <UART_Receive_data>
 27c:	88 23       	and	r24, r24
 27e:	59 f0       	breq	.+22     	; 0x296 <UART_Update+0x58>
    { // Byte recibido. Escribir byte en buffer de entrada
        if (RXindice_escritura < RX_BUFFER_LENGTH){
            RX_buffer[RXindice_escritura] = dato;	// Guardar dato en buffer
 280:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <RXindice_escritura>
 284:	e8 2f       	mov	r30, r24
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	ed 51       	subi	r30, 0x1D	; 29
 28a:	fd 4f       	sbci	r31, 0xFD	; 253
 28c:	99 81       	ldd	r25, Y+1	; 0x01
 28e:	90 83       	st	Z, r25
            RXindice_escritura++;	// Inc sin desbordar buffer
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <RXindice_escritura>
        }
        else
            *Error_code = ERROR_UART_FULL_BUFF;
    }
}
 296:	0f 90       	pop	r0
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
