
tp3-Entregable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000021e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cb  0080010c  0080010c  000002be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2f  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f5  00000000  00000000  00000dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000482  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c8  00000000  00000000  00001b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ac  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 3d       	cpi	r26, 0xD7	; 215
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Created: 09/06/2023 16:14:22
 *  Author: sleepydogo
 */
#include "main.h"

void main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <main+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	int aux = 0;
  b0:	1a 82       	std	Y+2, r1	; 0x02
  b2:	19 82       	std	Y+1, r1	; 0x01
	// Set baud rate to 9600
	UART_Init(BR9600);
  b4:	87 e6       	ldi	r24, 0x67	; 103
  b6:	0e 94 a0 00 	call	0x140	; 0x140 <UART_Init>
	UART_Write_String_To_Buffer("HOLA BOCA\n\r");
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 7f 00 	call	0xfe	; 0xfe <UART_Write_String_To_Buffer>
	while (1){
		UART_Update(&aux);
  c2:	ce 01       	movw	r24, r28
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <UART_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	87 ea       	ldi	r24, 0xA7	; 167
  cc:	91 e6       	ldi	r25, 0x61	; 97
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x28>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x2e>
  d4:	00 00       	nop
  d6:	f5 cf       	rjmp	.-22     	; 0xc2 <main+0x1c>

000000d8 <UART_Write_Char_To_Buffer>:
    {
        RXindice_lectura = 0;
        RXindice_escritura = 0;
        return 0; // No Hay
    }
}
  d8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <TXindice_escritura>
  dc:	94 36       	cpi	r25, 0x64	; 100
  de:	48 f4       	brcc	.+18     	; 0xf2 <UART_Write_Char_To_Buffer+0x1a>
  e0:	e9 2f       	mov	r30, r25
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	e1 5f       	subi	r30, 0xF1	; 241
  e6:	fe 4f       	sbci	r31, 0xFE	; 254
  e8:	80 83       	st	Z, r24
  ea:	9f 5f       	subi	r25, 0xFF	; 255
  ec:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <TXindice_escritura>
  f0:	08 95       	ret
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	9f ef       	ldi	r25, 0xFF	; 255
  f6:	fb 01       	movw	r30, r22
  f8:	91 83       	std	Z+1, r25	; 0x01
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <UART_Write_String_To_Buffer>:
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <UART_Write_String_To_Buffer+0xc>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	7c 01       	movw	r14, r24
 110:	1a 82       	std	Y+2, r1	; 0x02
 112:	19 82       	std	Y+1, r1	; 0x01
 114:	10 e0       	ldi	r17, 0x00	; 0
 116:	06 c0       	rjmp	.+12     	; 0x124 <UART_Write_String_To_Buffer+0x26>
 118:	be 01       	movw	r22, r28
 11a:	6f 5f       	subi	r22, 0xFF	; 255
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_Write_Char_To_Buffer>
 122:	1f 5f       	subi	r17, 0xFF	; 255
 124:	f7 01       	movw	r30, r14
 126:	e1 0f       	add	r30, r17
 128:	f1 1d       	adc	r31, r1
 12a:	80 81       	ld	r24, Z
 12c:	81 11       	cpse	r24, r1
 12e:	f4 cf       	rjmp	.-24     	; 0x118 <UART_Write_String_To_Buffer+0x1a>
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	08 95       	ret

00000140 <UART_Init>:
}
// Estas son las funciones que encapsulan el Hardware
void UART_Init(uint8_t baud){
		// config = 0x33 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 8MHz.
		// config = 0x25 ==> Configuro UART 9600bps, 8 bit data, 1 stop @ F_CPU = 4Hz.
		UCSR0B = 0;
 140:	e1 ec       	ldi	r30, 0xC1	; 193
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	10 82       	st	Z, r1
		UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 146:	96 e0       	ldi	r25, 0x06	; 6
 148:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		UBRR0H = (unsigned char)(baud>>8);
 14c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
		UBRR0L = (unsigned char)baud;
 150:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
		
		//TX Enable
		UCSR0B |= (1<<TXEN0);
 154:	80 81       	ld	r24, Z
 156:	88 60       	ori	r24, 0x08	; 8
 158:	80 83       	st	Z, r24
		//RX Enable
		UCSR0B |= (1<<RXEN0);
 15a:	80 81       	ld	r24, Z
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret

00000162 <UART_Send_Char>:
}
void UART_Send_Char (char dato)
{
	long Timeout = 0;
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	ba 01       	movw	r22, r20
	while ( ( ++Timeout ) && ((UCSR0A & (1<<UDRE0))==0));
 168:	4f 5f       	subi	r20, 0xFF	; 255
 16a:	5f 4f       	sbci	r21, 0xFF	; 255
 16c:	6f 4f       	sbci	r22, 0xFF	; 255
 16e:	7f 4f       	sbci	r23, 0xFF	; 255
 170:	21 f0       	breq	.+8      	; 0x17a <UART_Send_Char+0x18>
 172:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 176:	95 ff       	sbrs	r25, 5
 178:	f7 cf       	rjmp	.-18     	; 0x168 <UART_Send_Char+0x6>
	if (Timeout != 0)
 17a:	45 2b       	or	r20, r21
 17c:	46 2b       	or	r20, r22
 17e:	47 2b       	or	r20, r23
 180:	11 f0       	breq	.+4      	; 0x186 <UART_Send_Char+0x24>
	UDR0 = dato;
 182:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 186:	08 95       	ret

00000188 <UART_Receive_data>:
		// TX_UART did not respond â€“ error
	}
	return;
}

char UART_Receive_data(char *dato){
 188:	fc 01       	movw	r30, r24
    if (UCSR0A & (1 << RXC0)){
 18a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 18e:	99 23       	and	r25, r25
 190:	2c f4       	brge	.+10     	; 0x19c <UART_Receive_data+0x14>
        *dato = UDR0;
 192:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 196:	80 83       	st	Z, r24
        return 1;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	08 95       	ret
    }else
		return 0;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret

000001a0 <UART_Update>:
        RXindice_escritura = 0;
        return 0; // No Hay
    }
}

void UART_Update(int * Error_code){
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	1f 92       	push	r1
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	8c 01       	movw	r16, r24
    char dato;
    if (TXindice_lectura < TXindice_escritura) { // Hay byte en el buffer Tx para transmitir?
 1b0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <TXindice_lectura>
 1b4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <TXindice_escritura>
 1b8:	e8 17       	cp	r30, r24
 1ba:	60 f4       	brcc	.+24     	; 0x1d4 <UART_Update+0x34>
        UART_Send_Char(TX_buffer[TXindice_lectura]);
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	e1 5f       	subi	r30, 0xF1	; 241
 1c0:	fe 4f       	sbci	r31, 0xFE	; 254
 1c2:	80 81       	ld	r24, Z
 1c4:	0e 94 b1 00 	call	0x162	; 0x162 <UART_Send_Char>
        TXindice_lectura++;
 1c8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TXindice_lectura>
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TXindice_lectura>
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <UART_Update+0x3c>
    }else{ // No hay datos disponibles para enviar
        TXindice_lectura = 0;
 1d4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TXindice_lectura>
        TXindice_escritura = 0;
 1d8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <TXindice_escritura>
    }
    // se ha recibido algÃºn byte?
    if (UART_Receive_data(&dato) != 0)
 1dc:	ce 01       	movw	r24, r28
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	0e 94 c4 00 	call	0x188	; 0x188 <UART_Receive_data>
 1e4:	88 23       	and	r24, r24
 1e6:	99 f0       	breq	.+38     	; 0x20e <UART_Update+0x6e>
    { // Byte recibido. Escribir byte en buffer de entrada
        if (RXindice_escritura < RX_BUFFER_LENGTH){
 1e8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1ec:	84 36       	cpi	r24, 0x64	; 100
 1ee:	50 f4       	brcc	.+20     	; 0x204 <UART_Update+0x64>
            RX_buffer[RXindice_escritura] = dato;	// Guardar dato en buffer
 1f0:	e8 2f       	mov	r30, r24
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	ed 58       	subi	r30, 0x8D	; 141
 1f6:	fe 4f       	sbci	r31, 0xFE	; 254
 1f8:	99 81       	ldd	r25, Y+1	; 0x01
 1fa:	90 83       	st	Z, r25
            RXindice_escritura++;	// Inc sin desbordar buffer
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 202:	05 c0       	rjmp	.+10     	; 0x20e <UART_Update+0x6e>
        }
        else
            *Error_code = ERROR_UART_FULL_BUFF;
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	9f ef       	ldi	r25, 0xFF	; 255
 208:	f8 01       	movw	r30, r16
 20a:	91 83       	std	Z+1, r25	; 0x01
 20c:	80 83       	st	Z, r24
    }
}
 20e:	0f 90       	pop	r0
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
