
tp3-Entregable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  0000039e  00000432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000111  008001dc  008001dc  0000050e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e03  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000966  00000000  00000000  0000148b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b9  00000000  00000000  00001df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  000024ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f3  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d4  00000000  00000000  00002d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000322b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_18>
  4c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3d       	cpi	r26, 0xDC	; 220
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac ed       	ldi	r26, 0xDC	; 220
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 3e       	cpi	r26, 0xED	; 237
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#include "main.h"
uint8_t aux = 0;
void main(void){
	// Set baud rate to 9600
	UART_Init(BR9600);
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	0e 94 14 01 	call	0x228	; 0x228 <UART_Init>
	
	UART_TX_Interrupt_Enable();
  ac:	0e 94 25 01 	call	0x24a	; 0x24a <UART_TX_Interrupt_Enable>
	
	SEOS_Init_Timer();
  b0:	0e 94 74 00 	call	0xe8	; 0xe8 <SEOS_Init_Timer>
	
	MENU_Show_Menu();
  b4:	0e 94 5f 00 	call	0xbe	; 0xbe <MENU_Show_Menu>
	
	
	while (1){
		SEOS_Dispatch_Tasks();
  b8:	0e 94 91 00 	call	0x122	; 0x122 <SEOS_Dispatch_Tasks>
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <main+0x12>

000000be <MENU_Show_Menu>:
#include "menu.h"

void MENU_Show_Menu(void)
{
	// El menú se escribe en el buffer de transmisión
 	UART_Write_String_To_Buffer("Menu:\n\r");
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* PLAY: reproduce la cancion seleccionada\n\r");
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* STOP: detiene la reproduccion del sonido en curso\n\r");
  ce:	85 e3       	ldi	r24, 0x35	; 53
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* NUM: numero de cancion a seleccionar de la lista [1 a N]\n\r");
  d6:	8c e6       	ldi	r24, 0x6C	; 108
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Write_String_To_Buffer>
    UART_Write_String_To_Buffer("	* RESET: reinicia el sistema al estado inicial\n\r");
  de:	8a ea       	ldi	r24, 0xAA	; 170
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Write_String_To_Buffer>
  e6:	08 95       	ret

000000e8 <SEOS_Init_Timer>:

void SEOS_Init_Timer() {
	// ------------------------ Timer 0 ------------------------
	
	// Configuro una interrupción cada 1 mseg
	OCR0A = 248;			//124 para 8MHz y 248 para 16MHz
  e8:	88 ef       	ldi	r24, 0xF8	; 248
  ea:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 64
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);   // Modo CTC, clock interno, prescalador 64
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupción de comparación
  f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	
	// ------------------------ Timer 1 ------------------------
	
	TCCR1A|=(1<<COM1A0);// Configuro Timer1 para clk con prescaler P=1, modo CTC y salida por pin
  f8:	e0 e8       	ldi	r30, 0x80	; 128
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
 102:	e1 e8       	ldi	r30, 0x81	; 129
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	89 60       	ori	r24, 0x09	; 9
 10a:	80 83       	st	Z, r24
	DDRB|=(1<<PINB1); // El PIN1 del PORTB será el pin de salida
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	84 b9       	out	0x04, r24	; 4


	//Habilito la máscara de interrupciones
	
	sei();
 112:	78 94       	sei
 114:	08 95       	ret

00000116 <SEOS_Schedule_Tasks>:

uint8_t contador_UART = 0;
uint8_t error_uart = 0;

void SEOS_Schedule_Tasks() {
	UART_flag=1; //actualizar periferico
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <UART_flag>
	MENU_flag=1; //actualizar menu
 11c:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <MENU_flag>
 120:	08 95       	ret

00000122 <SEOS_Dispatch_Tasks>:
}

void SEOS_Dispatch_Tasks() {
	if (UART_flag) {
 122:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <UART_flag>
 126:	88 23       	and	r24, r24
 128:	31 f0       	breq	.+12     	; 0x136 <SEOS_Dispatch_Tasks+0x14>
		UART_flag=0;
 12a:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <UART_flag>
		UART_Update(&error_uart);
 12e:	8c ed       	ldi	r24, 0xDC	; 220
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <UART_Update>
 136:	08 95       	ret

00000138 <__vector_14>:
// 	}
}

// Control de la duraci�n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci�n de comparaci�n del Timer 0
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	SEOS_Schedule_Tasks();
 15a:	0e 94 8b 00 	call	0x116	; 0x116 <SEOS_Schedule_Tasks>
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	bf 91       	pop	r27
 164:	af 91       	pop	r26
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	7f 91       	pop	r23
 16c:	6f 91       	pop	r22
 16e:	5f 91       	pop	r21
 170:	4f 91       	pop	r20
 172:	3f 91       	pop	r19
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <UART_Write_Char_To_Buffer>:
    if (UCSR0A & (1 << RXC0)){
        *dato = UDR0;
        return 1;
    } else
		return 0;
}
 180:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <TXindice_escritura>
 184:	e9 2f       	mov	r30, r25
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ed 51       	subi	r30, 0x1D	; 29
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	80 83       	st	Z, r24
 18e:	9f 5f       	subi	r25, 0xFF	; 255
 190:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <TXindice_escritura>
 194:	08 95       	ret

00000196 <UART_Write_String_To_Buffer>:
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <UART_Write_String_To_Buffer+0xc>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	7c 01       	movw	r14, r24
 1a8:	1a 82       	std	Y+2, r1	; 0x02
 1aa:	19 82       	std	Y+1, r1	; 0x01
 1ac:	10 e0       	ldi	r17, 0x00	; 0
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <UART_Write_String_To_Buffer+0x26>
 1b0:	be 01       	movw	r22, r28
 1b2:	6f 5f       	subi	r22, 0xFF	; 255
 1b4:	7f 4f       	sbci	r23, 0xFF	; 255
 1b6:	0e 94 c0 00 	call	0x180	; 0x180 <UART_Write_Char_To_Buffer>
 1ba:	1f 5f       	subi	r17, 0xFF	; 255
 1bc:	f7 01       	movw	r30, r14
 1be:	e1 0f       	add	r30, r17
 1c0:	f1 1d       	adc	r31, r1
 1c2:	80 81       	ld	r24, Z
 1c4:	81 11       	cpse	r24, r1
 1c6:	f4 cf       	rjmp	.-24     	; 0x1b0 <UART_Write_String_To_Buffer+0x1a>
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	08 95       	ret

000001d8 <UART_Update>:
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	64 97       	sbiw	r28, 0x14	; 20
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <FLAG_datos_recibidos>
 1f0:	88 23       	and	r24, r24
 1f2:	89 f0       	breq	.+34     	; 0x216 <UART_Update+0x3e>
 1f4:	40 91 df 01 	lds	r20, 0x01DF	; 0x8001df <RXindice_escritura>
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	63 ee       	ldi	r22, 0xE3	; 227
 1fc:	72 e0       	ldi	r23, 0x02	; 2
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 c4 01 	call	0x388	; 0x388 <memcpy>
 206:	83 ee       	ldi	r24, 0xE3	; 227
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Write_String_To_Buffer>
 20e:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <FLAG_datos_recibidos>
 212:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <RXindice_escritura>
 216:	64 96       	adiw	r28, 0x14	; 20
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <UART_Init>:
 228:	e1 ec       	ldi	r30, 0xC1	; 193
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	10 82       	st	Z, r1
 22e:	96 e0       	ldi	r25, 0x06	; 6
 230:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 234:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 238:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 23c:	80 81       	ld	r24, Z
 23e:	88 60       	ori	r24, 0x08	; 8
 240:	80 83       	st	Z, r24
 242:	80 81       	ld	r24, Z
 244:	80 61       	ori	r24, 0x10	; 16
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <UART_TX_Interrupt_Enable>:
 24a:	e1 ec       	ldi	r30, 0xC1	; 193
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	80 62       	ori	r24, 0x20	; 32
 252:	80 83       	st	Z, r24
 254:	08 95       	ret

00000256 <UART_TX_Interrupt_Disable>:
 256:	e1 ec       	ldi	r30, 0xC1	; 193
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	8f 7d       	andi	r24, 0xDF	; 223
 25e:	80 83       	st	Z, r24
 260:	08 95       	ret

00000262 <UART_RX_Interrupt_Enable>:
 262:	e1 ec       	ldi	r30, 0xC1	; 193
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 68       	ori	r24, 0x80	; 128
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <UART_RX_Interrupt_Disable>:
 26e:	e1 ec       	ldi	r30, 0xC1	; 193
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	8f 67       	ori	r24, 0x7F	; 127
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <UART_Send_Char>:
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	ba 01       	movw	r22, r20
 280:	4f 5f       	subi	r20, 0xFF	; 255
 282:	5f 4f       	sbci	r21, 0xFF	; 255
 284:	6f 4f       	sbci	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	21 f0       	breq	.+8      	; 0x292 <UART_Send_Char+0x18>
 28a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 28e:	95 ff       	sbrs	r25, 5
 290:	f7 cf       	rjmp	.-18     	; 0x280 <UART_Send_Char+0x6>
 292:	45 2b       	or	r20, r21
 294:	46 2b       	or	r20, r22
 296:	47 2b       	or	r20, r23
 298:	11 f0       	breq	.+4      	; 0x29e <UART_Send_Char+0x24>
 29a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 29e:	08 95       	ret

000002a0 <__vector_19>:

// Foreground - Consumidor, esperamos a que la tarea de background genere los datos y los transmisitmos
ISR(USART_UDRE_vect) {
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	if ((TXindice_lectura < TX_BUFFER_LENGTH) && (TX_buffer[TXindice_lectura] != '\0')) {
 2c2:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <TXindice_lectura>
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ed 51       	subi	r30, 0x1D	; 29
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	80 81       	ld	r24, Z
 2ce:	88 23       	and	r24, r24
 2d0:	41 f0       	breq	.+16     	; 0x2e2 <__vector_19+0x42>
		UART_Send_Char(TX_buffer[TXindice_lectura]);
 2d2:	0e 94 3d 01 	call	0x27a	; 0x27a <UART_Send_Char>
		TXindice_lectura++;
 2d6:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <TXindice_lectura>
 2da:	8f 5f       	subi	r24, 0xFF	; 255
 2dc:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <TXindice_lectura>
 2e0:	06 c0       	rjmp	.+12     	; 0x2ee <__vector_19+0x4e>
	}
	else {
		TXindice_lectura = 0;
 2e2:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <TXindice_lectura>
		UART_TX_Interrupt_Disable();
 2e6:	0e 94 2b 01 	call	0x256	; 0x256 <UART_TX_Interrupt_Disable>
		UART_RX_Interrupt_Enable();
 2ea:	0e 94 31 01 	call	0x262	; 0x262 <UART_RX_Interrupt_Enable>
	}
}
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <__vector_18>:

// Foreground - Productor
ISR(USART_RX_vect) {
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
	char aux = UDR0;
 332:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (aux != '\r'){
 336:	9d 30       	cpi	r25, 0x0D	; 13
 338:	59 f0       	breq	.+22     	; 0x350 <__vector_18+0x40>
		RX_buffer[RXindice_escritura] = aux;
 33a:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <RXindice_escritura>
 33e:	e8 2f       	mov	r30, r24
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ed 51       	subi	r30, 0x1D	; 29
 344:	fd 4f       	sbci	r31, 0xFD	; 253
 346:	90 83       	st	Z, r25
		RXindice_escritura++;
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <RXindice_escritura>
 34e:	0b c0       	rjmp	.+22     	; 0x366 <__vector_18+0x56>
	}else{
		RX_buffer[RXindice_escritura] = '\0';
 350:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <RXindice_escritura>
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	ed 51       	subi	r30, 0x1D	; 29
 358:	fd 4f       	sbci	r31, 0xFD	; 253
 35a:	10 82       	st	Z, r1
		FLAG_datos_recibidos = 1;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <FLAG_datos_recibidos>
		UART_RX_Interrupt_Disable();
 362:	0e 94 37 01 	call	0x26e	; 0x26e <UART_RX_Interrupt_Disable>
	}
}	
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <memcpy>:
 388:	fb 01       	movw	r30, r22
 38a:	dc 01       	movw	r26, r24
 38c:	02 c0       	rjmp	.+4      	; 0x392 <memcpy+0xa>
 38e:	01 90       	ld	r0, Z+
 390:	0d 92       	st	X+, r0
 392:	41 50       	subi	r20, 0x01	; 1
 394:	50 40       	sbci	r21, 0x00	; 0
 396:	d8 f7       	brcc	.-10     	; 0x38e <memcpy+0x6>
 398:	08 95       	ret

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
