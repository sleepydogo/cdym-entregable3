
tp3-Entregable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000202  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d6  00800102  00800102  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b62  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083c  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a4  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003dd  00000000  00000000  00002069  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002446  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3d       	cpi	r26, 0xD8	; 216
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  9e:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <tx_interrupt_handler>:
char tx_buffer[100];
char rx_buffer[100];

void tx_interrupt_handler(void)
{
	uart_transmit(&uart_driver, tx_buffer, strlen(tx_buffer));
  a6:	e6 e6       	ldi	r30, 0x66	; 102
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	01 90       	ld	r0, Z+
  ac:	00 20       	and	r0, r0
  ae:	e9 f7       	brne	.-6      	; 0xaa <tx_interrupt_handler+0x4>
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	af 01       	movw	r20, r30
  b4:	46 56       	subi	r20, 0x66	; 102
  b6:	51 40       	sbci	r21, 0x01	; 1
  b8:	66 e6       	ldi	r22, 0x66	; 102
  ba:	71 e0       	ldi	r23, 0x01	; 1
  bc:	8a ec       	ldi	r24, 0xCA	; 202
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <uart_transmit>
  c4:	08 95       	ret

000000c6 <rx_interrupt_handler>:
}

void rx_interrupt_handler(void)
{
	char *data = uart_receive(&uart_driver, 100);
  c6:	64 e6       	ldi	r22, 0x64	; 100
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	8a ec       	ldi	r24, 0xCA	; 202
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_receive>
  d2:	08 95       	ret

000000d4 <main>:
	// Procesamiento de data
	// ...
}

void main()
{
  d4:	af 92       	push	r10
  d6:	cf 92       	push	r12
  d8:	df 92       	push	r13
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
	uint8_t baud_rate = 0x33; 
	uart_init(&uart_driver, tx_buffer, 100, rx_buffer, 100, tx_interrupt_handler, rx_interrupt_handler, baud_rate);
  e6:	0f 2e       	mov	r0, r31
  e8:	f3 e3       	ldi	r31, 0x33	; 51
  ea:	af 2e       	mov	r10, r31
  ec:	f0 2d       	mov	r31, r0
  ee:	0f 2e       	mov	r0, r31
  f0:	f3 e6       	ldi	r31, 0x63	; 99
  f2:	cf 2e       	mov	r12, r31
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	df 2e       	mov	r13, r31
  f8:	f0 2d       	mov	r31, r0
  fa:	0f 2e       	mov	r0, r31
  fc:	f3 e5       	ldi	r31, 0x53	; 83
  fe:	ef 2e       	mov	r14, r31
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ff 2e       	mov	r15, r31
 104:	f0 2d       	mov	r31, r0
 106:	04 e6       	ldi	r16, 0x64	; 100
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	31 e0       	ldi	r19, 0x01	; 1
 10e:	44 e6       	ldi	r20, 0x64	; 100
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	66 e6       	ldi	r22, 0x66	; 102
 114:	71 e0       	ldi	r23, 0x01	; 1
 116:	8a ec       	ldi	r24, 0xCA	; 202
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 ab 00 	call	0x156	; 0x156 <uart_init>

	uart_transmit(&uart_driver, "a", strlen("a"));
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	71 e0       	ldi	r23, 0x01	; 1
 126:	8a ec       	ldi	r24, 0xCA	; 202
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <uart_transmit>

	while (1)
	{
		uart_driver.rx_interrupt_handler();
 12e:	ca ec       	ldi	r28, 0xCA	; 202
 130:	d1 e0       	ldi	r29, 0x01	; 1
 132:	ea 85       	ldd	r30, Y+10	; 0x0a
 134:	fb 85       	ldd	r31, Y+11	; 0x0b
 136:	09 95       	icall

		char data = uart_driver.rx_buffer[0];
 138:	ea 81       	ldd	r30, Y+2	; 0x02
 13a:	fb 81       	ldd	r31, Y+3	; 0x03
 13c:	80 81       	ld	r24, Z

		if (data == '\n')
 13e:	8a 30       	cpi	r24, 0x0A	; 10
 140:	b1 f7       	brne	.-20     	; 0x12e <main+0x5a>
			break;
		}
	}

	return 0;
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	df 90       	pop	r13
 150:	cf 90       	pop	r12
 152:	af 90       	pop	r10
 154:	08 95       	ret

00000156 <uart_init>:

struct uart_driver *local_copy_driver;

// Inicializamos el driver
void uart_init(struct uart_driver *driver, char *tx_buffer, int tx_size, char *rx_buffer, int rx_size, void (*tx_interrupt_handler)(void), void (*rx_interrupt_handler)(void), uint8_t baud_rate)
{
 156:	af 92       	push	r10
 158:	cf 92       	push	r12
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	fc 01       	movw	r30, r24
    driver->tx_buffer = tx_buffer;
 166:	71 83       	std	Z+1, r23	; 0x01
 168:	60 83       	st	Z, r22
    driver->rx_buffer = rx_buffer;
 16a:	33 83       	std	Z+3, r19	; 0x03
 16c:	22 83       	std	Z+2, r18	; 0x02
    driver->tx_size = tx_size;
 16e:	55 83       	std	Z+5, r21	; 0x05
 170:	44 83       	std	Z+4, r20	; 0x04
    driver->rx_size = rx_size;
 172:	17 83       	std	Z+7, r17	; 0x07
 174:	06 83       	std	Z+6, r16	; 0x06
    driver->tx_interrupt_handler = tx_interrupt_handler;
 176:	f1 86       	std	Z+9, r15	; 0x09
 178:	e0 86       	std	Z+8, r14	; 0x08
    driver->rx_interrupt_handler = rx_interrupt_handler;
 17a:	d3 86       	std	Z+11, r13	; 0x0b
 17c:	c2 86       	std	Z+10, r12	; 0x0a
	local_copy_driver = driver;
 17e:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <local_copy_driver+0x1>
 182:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <local_copy_driver>

    // Seteamos el baud rate de acuerdo a baud_rate
    UBRR0H = (unsigned char)(baud_rate >> 8);
 186:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char)baud_rate;
 18a:	a0 92 c4 00 	sts	0x00C4, r10	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    // Deshabilitamos todas las funciones del USART
    UCSR0B = 0;
 18e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

    // Seteamos el data type del UART
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
}
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	af 90       	pop	r10
 1a6:	08 95       	ret

000001a8 <uart_transmit>:

// Transmision de datos
void uart_transmit(struct uart_driver *driver, char *data, int size)
{
    // Checkeamos si hay suficiente espacio en el buffer de transmision
    if (size > driver->tx_size)
 1a8:	fc 01       	movw	r30, r24
 1aa:	24 81       	ldd	r18, Z+4	; 0x04
 1ac:	35 81       	ldd	r19, Z+5	; 0x05
 1ae:	24 17       	cp	r18, r20
 1b0:	35 07       	cpc	r19, r21
 1b2:	4c f0       	brlt	.+18     	; 0x1c6 <uart_transmit+0x1e>
        // No hay suficiente espacio..
        return;
    }

    // Copiamos los datos al buffer de transmision
    memcpy(driver->tx_buffer, data, size);
 1b4:	80 81       	ld	r24, Z
 1b6:	91 81       	ldd	r25, Z+1	; 0x01
 1b8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <memcpy>

    // Habilitamos la interrupcion de transmision
    UCSR0B |= (1 << UDRIE0);
 1bc:	e1 ec       	ldi	r30, 0xC1	; 193
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	80 62       	ori	r24, 0x20	; 32
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <uart_receive>:
}

// Recepcion de datos
char *uart_receive(struct uart_driver *driver, int size)
{
 1c8:	fc 01       	movw	r30, r24
    // Checkeamos si hay suficiente espacio en el buffer de recepcion
    if (size > driver->rx_size)
 1ca:	86 81       	ldd	r24, Z+6	; 0x06
 1cc:	97 81       	ldd	r25, Z+7	; 0x07
 1ce:	86 17       	cp	r24, r22
 1d0:	97 07       	cpc	r25, r23
 1d2:	4c f0       	brlt	.+18     	; 0x1e6 <uart_receive+0x1e>
        // No hay suficiente espacio..
        return 0;
    }

    // Copiamos los datos en data desde el buffer de recepcion 
    char *data = driver->rx_buffer;
 1d4:	22 81       	ldd	r18, Z+2	; 0x02
 1d6:	93 81       	ldd	r25, Z+3	; 0x03

    // Deshabilitamos las interrupciones de recepcion
    UCSR0B &= ~(1 << RXCIE0);
 1d8:	e1 ec       	ldi	r30, 0xC1	; 193
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	8f 77       	andi	r24, 0x7F	; 127
 1e0:	80 83       	st	Z, r24

    // Retornamos los datos...
    return data;
 1e2:	82 2f       	mov	r24, r18
 1e4:	08 95       	ret
{
    // Checkeamos si hay suficiente espacio en el buffer de recepcion
    if (size > driver->rx_size)
    {
        // No hay suficiente espacio..
        return 0;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
    // Deshabilitamos las interrupciones de recepcion
    UCSR0B &= ~(1 << RXCIE0);

    // Retornamos los datos...
    return data;
}
 1ea:	08 95       	ret

000001ec <memcpy>:
 1ec:	fb 01       	movw	r30, r22
 1ee:	dc 01       	movw	r26, r24
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <memcpy+0xa>
 1f2:	01 90       	ld	r0, Z+
 1f4:	0d 92       	st	X+, r0
 1f6:	41 50       	subi	r20, 0x01	; 1
 1f8:	50 40       	sbci	r21, 0x00	; 0
 1fa:	d8 f7       	brcc	.-10     	; 0x1f2 <memcpy+0x6>
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
