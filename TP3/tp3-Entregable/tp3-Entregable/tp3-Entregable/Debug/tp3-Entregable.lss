
tp3-Entregable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000111  00800100  00800100  00000358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c35  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b8  00000000  00000000  000010d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f3  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00001f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a6  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000359  00000000  00000000  0000271a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002a73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#include "main.h"
uint8_t aux = 0;
void main(void){
	// Set baud rate to 9600
	UART_Init(BR9600);
  a6:	87 e6       	ldi	r24, 0x67	; 103
  a8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <UART_Init>
	UART_RX_Interrupt_Enable();
  ac:	0e 94 e6 00 	call	0x1cc	; 0x1cc <UART_RX_Interrupt_Enable>
	SEOS_Init_Timer();
  b0:	0e 94 5d 00 	call	0xba	; 0xba <SEOS_Init_Timer>
	//MENU_Show_Menu();
	while (1){
		SEOS_Dispatch_Tasks();
  b4:	0e 94 7a 00 	call	0xf4	; 0xf4 <SEOS_Dispatch_Tasks>
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0xe>

000000ba <SEOS_Init_Timer>:

void SEOS_Init_Timer() {
	// ------------------------ Timer 0 ------------------------
	
	// Configuro una interrupción cada 1 mseg
	OCR0A = 248;			//124 para 8MHz y 248 para 16MHz
  ba:	88 ef       	ldi	r24, 0xF8	; 248
  bc:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 64
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);   // Modo CTC, clock interno, prescalador 64
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupción de comparación
  c6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	
	// ------------------------ Timer 1 ------------------------
	
	TCCR1A|=(1<<COM1A0);// Configuro Timer1 para clk con prescaler P=1, modo CTC y salida por pin
  ca:	e0 e8       	ldi	r30, 0x80	; 128
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
  d4:	e1 e8       	ldi	r30, 0x81	; 129
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	89 60       	ori	r24, 0x09	; 9
  dc:	80 83       	st	Z, r24
	DDRB|=(1<<PINB1); // El PIN1 del PORTB será el pin de salida
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	84 b9       	out	0x04, r24	; 4


	//Habilito la máscara de interrupciones
	
	sei();
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <SEOS_Schedule_Tasks>:

uint8_t contador_UART = 0;
uint8_t error_uart = 0;

void SEOS_Schedule_Tasks() {
	UART_flag=1; //actualizar periferico
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UART_flag>
	MENU_flag=1; //actualizar menu
  ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <MENU_flag>
  f2:	08 95       	ret

000000f4 <SEOS_Dispatch_Tasks>:
}

void SEOS_Dispatch_Tasks() {
	if (UART_flag) {
  f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <UART_flag>
  f8:	88 23       	and	r24, r24
  fa:	31 f0       	breq	.+12     	; 0x108 <SEOS_Dispatch_Tasks+0x14>
		UART_flag=0;
  fc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <UART_flag>
		UART_Update(&error_uart);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 ff 00 	call	0x1fe	; 0x1fe <UART_Update>
 108:	08 95       	ret

0000010a <__vector_14>:
// 	}
}

// Control de la duraci�n del sonido
ISR (TIMER0_COMPA_vect) // ISR para la interrupci�n de comparaci�n del Timer 0
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	SEOS_Schedule_Tasks();
 12c:	0e 94 74 00 	call	0xe8	; 0xe8 <SEOS_Schedule_Tasks>
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <UART_Write_Char_To_Buffer>:
    if (UCSR0A & (1 << RXC0)){
        *dato = UDR0;
        return 1;
    } else
		return 0;
}
 152:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <TXindice_escritura>
 156:	e9 2f       	mov	r30, r25
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	e9 5f       	subi	r30, 0xF9	; 249
 15c:	fe 4f       	sbci	r31, 0xFE	; 254
 15e:	80 83       	st	Z, r24
 160:	9f 5f       	subi	r25, 0xFF	; 255
 162:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <TXindice_escritura>
 166:	08 95       	ret

00000168 <UART_Write_String_To_Buffer>:
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <UART_Write_String_To_Buffer+0xc>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	7c 01       	movw	r14, r24
 17a:	1a 82       	std	Y+2, r1	; 0x02
 17c:	19 82       	std	Y+1, r1	; 0x01
 17e:	10 e0       	ldi	r17, 0x00	; 0
 180:	06 c0       	rjmp	.+12     	; 0x18e <UART_Write_String_To_Buffer+0x26>
 182:	be 01       	movw	r22, r28
 184:	6f 5f       	subi	r22, 0xFF	; 255
 186:	7f 4f       	sbci	r23, 0xFF	; 255
 188:	0e 94 a9 00 	call	0x152	; 0x152 <UART_Write_Char_To_Buffer>
 18c:	1f 5f       	subi	r17, 0xFF	; 255
 18e:	f7 01       	movw	r30, r14
 190:	e1 0f       	add	r30, r17
 192:	f1 1d       	adc	r31, r1
 194:	80 81       	ld	r24, Z
 196:	81 11       	cpse	r24, r1
 198:	f4 cf       	rjmp	.-24     	; 0x182 <UART_Write_String_To_Buffer+0x1a>
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	ff 90       	pop	r15
 1a6:	ef 90       	pop	r14
 1a8:	08 95       	ret

000001aa <UART_Init>:
 1aa:	e1 ec       	ldi	r30, 0xC1	; 193
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	10 82       	st	Z, r1
 1b0:	96 e0       	ldi	r25, 0x06	; 6
 1b2:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1be:	80 81       	ld	r24, Z
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	80 83       	st	Z, r24
 1c4:	80 81       	ld	r24, Z
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	80 83       	st	Z, r24
 1ca:	08 95       	ret

000001cc <UART_RX_Interrupt_Enable>:
 1cc:	e1 ec       	ldi	r30, 0xC1	; 193
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	80 83       	st	Z, r24
 1d6:	08 95       	ret

000001d8 <UART_Send_Char>:
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	ba 01       	movw	r22, r20
 1de:	4f 5f       	subi	r20, 0xFF	; 255
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255
 1e2:	6f 4f       	sbci	r22, 0xFF	; 255
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	21 f0       	breq	.+8      	; 0x1f0 <UART_Send_Char+0x18>
 1e8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ec:	95 ff       	sbrs	r25, 5
 1ee:	f7 cf       	rjmp	.-18     	; 0x1de <UART_Send_Char+0x6>
 1f0:	45 2b       	or	r20, r21
 1f2:	46 2b       	or	r20, r22
 1f4:	47 2b       	or	r20, r23
 1f6:	11 f0       	breq	.+4      	; 0x1fc <UART_Send_Char+0x24>
 1f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1fc:	08 95       	ret

000001fe <UART_Update>:
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	64 97       	sbiw	r28, 0x14	; 20
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	cd bf       	out	0x3d, r28	; 61
 212:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <FLAG_datos_recibidos>
 216:	88 23       	and	r24, r24
 218:	89 f0       	breq	.+34     	; 0x23c <UART_Update+0x3e>
 21a:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <RXindice_escritura>
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	67 e0       	ldi	r22, 0x07	; 7
 222:	72 e0       	ldi	r23, 0x02	; 2
 224:	ce 01       	movw	r24, r28
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	0e 94 67 01 	call	0x2ce	; 0x2ce <memcpy>
 22c:	87 e0       	ldi	r24, 0x07	; 7
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	0e 94 b4 00 	call	0x168	; 0x168 <UART_Write_String_To_Buffer>
 234:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <FLAG_datos_recibidos>
 238:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <RXindice_escritura>
 23c:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <TXindice_lectura>
 240:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TXindice_escritura>
 244:	e8 17       	cp	r30, r24
 246:	60 f4       	brcc	.+24     	; 0x260 <UART_Update+0x62>
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	e9 5f       	subi	r30, 0xF9	; 249
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	80 81       	ld	r24, Z
 250:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <UART_Send_Char>
 254:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <TXindice_lectura>
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <TXindice_lectura>
 25e:	04 c0       	rjmp	.+8      	; 0x268 <UART_Update+0x6a>
 260:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <TXindice_lectura>
 264:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <TXindice_escritura>
 268:	64 96       	adiw	r28, 0x14	; 20
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <__vector_18>:
// 		UCSR0B &= ~(1<<TXCIE0); // deshabilita la interrupción de transmisión completa en el registro de control de la USART, asegurándose de que el microcontrolador no sea interrumpido cuando se completa la transmisión de datos a través de la USART.
// 	}
// }

// Foreground - Productor
ISR(USART_RX_vect) {
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
	char aux = UDR0;
 28c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (aux != '\r'){
 290:	9d 30       	cpi	r25, 0x0D	; 13
 292:	59 f0       	breq	.+22     	; 0x2aa <__vector_18+0x30>
		RX_buffer[RXindice_escritura] = aux;
 294:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <RXindice_escritura>
 298:	e8 2f       	mov	r30, r24
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	e9 5f       	subi	r30, 0xF9	; 249
 29e:	fd 4f       	sbci	r31, 0xFD	; 253
 2a0:	90 83       	st	Z, r25
		RXindice_escritura++;
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <RXindice_escritura>
 2a8:	09 c0       	rjmp	.+18     	; 0x2bc <__vector_18+0x42>
	}else{
		RX_buffer[RXindice_escritura] = '\0';
 2aa:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <RXindice_escritura>
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	e9 5f       	subi	r30, 0xF9	; 249
 2b2:	fd 4f       	sbci	r31, 0xFD	; 253
 2b4:	10 82       	st	Z, r1
		FLAG_datos_recibidos = 1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <FLAG_datos_recibidos>
	}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <memcpy>:
 2ce:	fb 01       	movw	r30, r22
 2d0:	dc 01       	movw	r26, r24
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <memcpy+0xa>
 2d4:	01 90       	ld	r0, Z+
 2d6:	0d 92       	st	X+, r0
 2d8:	41 50       	subi	r20, 0x01	; 1
 2da:	50 40       	sbci	r21, 0x00	; 0
 2dc:	d8 f7       	brcc	.-10     	; 0x2d4 <memcpy+0x6>
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
