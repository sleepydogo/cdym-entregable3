
tp3-ej1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000021c  000002b0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a8  00000000  00000000  000002df  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000fb7  00000000  00000000  00000387  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000781  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004b9  00000000  00000000  00001abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000174  00000000  00000000  00001f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002b0  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002df  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  0000267b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001b0  000001b0  00000244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002704  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000048  000000c8  000000c8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_18 00000020  00000148  00000148  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .bss.RX_Buffer 00000001  00800168  00800168  000002b0  2**0
                  ALLOC
 16 .data.msg2    0000000f  00800159  0000020d  000002a1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .data.msg1    00000059  00800100  000001b4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.SerialPort_Init 00000014  00000168  00000168  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.SerialPort_TX_Enable 0000000c  0000017c  0000017c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.SerialPort_RX_Enable 0000000c  00000188  00000188  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.SerialPort_RX_Interrupt_Enable 0000000c  00000194  00000194  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.SerialPort_Wait_For_TX_Buffer_Free 0000000a  000001a0  000001a0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.SerialPort_Send_Data 00000006  000001aa  000001aa  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.SerialPort_Send_String 00000038  00000110  00000110  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  2c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_18>
  4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 68       	ori	r16, 0x81	; 129
  6c:	00 01       	movw	r0, r0
  6e:	b4 01       	movw	r22, r8
  70:	68 01       	movw	r12, r16
  72:	69 80       	ldd	r6, Y+1	; 0x01

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 64 00 	call	0xc8	; 0xc8 <_etext>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

000001b0 <__bad_interrupt>:
 1b0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000c8 <main>:
 volatile char RX_Buffer=0;

 int main(void)
 {
	 
	 SerialPort_Init(BR9600); 		// Inicializo formato 8N1 y BAUDRATE = 9600bps
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	0e 94 b4 00 	call	0x168	; 0x168 <SerialPort_Init>
	 SerialPort_TX_Enable();			// Activo el Transmisor del Puerto Serie
  ce:	0e 94 be 00 	call	0x17c	; 0x17c <SerialPort_TX_Enable>
	 SerialPort_RX_Enable();			// Activo el Receptor del Puerto Serie
  d2:	0e 94 c4 00 	call	0x188	; 0x188 <SerialPort_RX_Enable>
	 SerialPort_Send_String(msg1);   // Envío el mensaje de Bienvenida
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 88 00 	call	0x110	; 0x110 <SerialPort_Send_String>
	 SerialPort_RX_Interrupt_Enable();	// Activo Interrupción de recepcion.
  de:	0e 94 ca 00 	call	0x194	; 0x194 <SerialPort_RX_Interrupt_Enable>
	 sei();								// Activo la mascara global de interrupciones (Bit I del SREG en 1)
  e2:	78 94       	sei

	 while(1)
	 {
		 if(RX_Buffer){ // recepción NO Bloqueante
  e4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <RX_Buffer>
  e8:	88 23       	and	r24, r24
  ea:	e1 f3       	breq	.-8      	; 0xe4 <main+0x1c>
			 // Si presionan 's' se termina el programa
			 if(RX_Buffer == 's'){
  ec:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <RX_Buffer>
  f0:	83 37       	cpi	r24, 0x73	; 115
  f2:	29 f4       	brne	.+10     	; 0xfe <main+0x36>
				 SerialPort_Send_String(msg2);  // Envío el string de despedida
  f4:	89 e5       	ldi	r24, 0x59	; 89
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 88 00 	call	0x110	; 0x110 <SerialPort_Send_String>
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0x34>
				 while(1);
			 }
			 else{	// Eco:
				 SerialPort_Wait_For_TX_Buffer_Free(); // Espero a que el canal de transmisión este libre (bloqueante)
  fe:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SerialPort_Wait_For_TX_Buffer_Free>
				 SerialPort_Send_Data(RX_Buffer);			  // Envío el dato recibido
 102:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <RX_Buffer>
 106:	0e 94 d5 00 	call	0x1aa	; 0x1aa <SerialPort_Send_Data>
			 }
			 RX_Buffer=0;
 10a:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <RX_Buffer>
 10e:	ea cf       	rjmp	.-44     	; 0xe4 <main+0x1c>

Disassembly of section .text.__vector_18:

00000148 <__vector_18>:
	 }
	 return 0;
 }

 // Rutina de Servicio de Interrupción de Byte Recibido
 ISR(USART_RX_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
	 RX_Buffer = UDR0; //la lectura del UDR borra flag RXC
 154:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 158:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <RX_Buffer>
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

Disassembly of section .text.SerialPort_Init:

00000168 <SerialPort_Init>:
	UCSR0B |= (1<<UDRIE0);
}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 168:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 16c:	96 e0       	ldi	r25, 0x06	; 6
 16e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 172:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 176:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 17a:	08 95       	ret

Disassembly of section .text.SerialPort_TX_Enable:

0000017c <SerialPort_TX_Enable>:
 17c:	e1 ec       	ldi	r30, 0xC1	; 193
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 60       	ori	r24, 0x08	; 8
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

Disassembly of section .text.SerialPort_RX_Enable:

00000188 <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 188:	e1 ec       	ldi	r30, 0xC1	; 193
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 61       	ori	r24, 0x10	; 16
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

Disassembly of section .text.SerialPort_RX_Interrupt_Enable:

00000194 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 194:	e1 ec       	ldi	r30, 0xC1	; 193
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

Disassembly of section .text.SerialPort_Wait_For_TX_Buffer_Free:

000001a0 <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisión

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 1a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a4:	85 ff       	sbrs	r24, 5
 1a6:	fc cf       	rjmp	.-8      	; 0x1a0 <SerialPort_Wait_For_TX_Buffer_Free>
}
 1a8:	08 95       	ret

Disassembly of section .text.SerialPort_Send_Data:

000001aa <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 1aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1ae:	08 95       	ret

Disassembly of section .text.SerialPort_Send_String:

00000110 <SerialPort_Send_String>:
	UCSR0B |= (1<<UDRIE0);
}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	7c 01       	movw	r14, r24
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	07 c0       	rjmp	.+14     	; 0x12e <SerialPort_Send_String+0x1e>
 120:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SerialPort_Wait_For_TX_Buffer_Free>
 124:	f8 01       	movw	r30, r16
 126:	80 81       	ld	r24, Z
 128:	0e 94 d5 00 	call	0x1aa	; 0x1aa <SerialPort_Send_Data>
 12c:	cf 5f       	subi	r28, 0xFF	; 255
 12e:	87 01       	movw	r16, r14
 130:	0c 0f       	add	r16, r28
 132:	11 1d       	adc	r17, r1
 134:	f8 01       	movw	r30, r16
 136:	80 81       	ld	r24, Z
 138:	81 11       	cpse	r24, r1
 13a:	f2 cf       	rjmp	.-28     	; 0x120 <SerialPort_Send_String+0x10>
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	0f 91       	pop	r16
 142:	ff 90       	pop	r15
 144:	ef 90       	pop	r14
 146:	08 95       	ret
